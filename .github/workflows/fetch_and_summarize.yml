import json
import datetime
from pathlib import Path
from transformers import pipeline
import torch

# === CONFIG ===
INPUT_PATH = "paper_to_summarize.json"
POSTS_DIR = Path("data-blog/posts")  # âœ… Updated path to be inside repo

# === STEP 1: Load Paper Info ===
with open(INPUT_PATH) as f:
    paper = json.load(f)

# === STEP 2: Load Models ===
device = 0 if torch.cuda.is_available() else -1
print(f"Device set to use {'cuda' if device == 0 else 'cpu'}")

print("ðŸ”§ Loading models...")
summarizer = pipeline("summarization", model="facebook/bart-large-cnn", device=device)
simplifier = pipeline("text2text-generation", model="t5-small", device=device)

# === STEP 3: Generate Summary and Simplification ===
print("ðŸ§  Summarizing abstract...")
abstract = paper.get("abstract", "")
summary = summarizer(abstract, max_length=130, min_length=30, do_sample=False)[0]["summary_text"]

print("ðŸª„ Simplifying summary...")
prompt = f"Simplify this for someone without AI knowledge: {summary}"
simplified = simplifier(prompt, max_length=100)[0]["generated_text"]

# === STEP 4: Create .qmd Blog Post ===
POSTS_DIR.mkdir(parents=True, exist_ok=True)
date_str = datetime.date.today().isoformat()
slug = f"{date_str}-ai-summary"
title = paper["title"]
doi_url = paper.get("doi")
url = "https://doi.org/" + doi_url if doi_url else paper["id"].replace("https://openalex.org/", "https://doi.org/")

content = f"""
---
title: "AI Paper of the Week: {title}"
date: {date_str}
categories: ["AI", "{paper.get('concept', 'AI')}"]
---

### ðŸ§  Topic of the Week: {paper.get('concept', 'AI')}

**Paper**: [{title}]({url})  
**Published**: {paper.get('publication_date', 'unknown')}

---

### TL;DR (Technical Summary)
{summary}

### ðŸª„ Explained Simply
{simplified}

### ðŸ”— [Read the full paper]({url})
"""

post_path = POSTS_DIR / f"{slug}.qmd"
post_path.write_text(content.strip())
print(f"âœ… Blog post created at {post_path}")
